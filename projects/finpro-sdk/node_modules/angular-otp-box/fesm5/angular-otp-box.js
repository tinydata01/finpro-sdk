import { Pipe, EventEmitter, Directive, Input, Output, Component, ViewChildren, ElementRef, Renderer2, NgModule } from '@angular/core';
import { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Subject, Subscription, timer } from 'rxjs';
import { switchMap, take, tap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    KeysPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object.keys(value);
    };
    KeysPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'keys'
                },] }
    ];
    return KeysPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Setting = /** @class */ (function () {
    function Setting() {
    }
    return Setting;
}());
if (false) {
    /** @type {?} */
    Setting.prototype.inputStyles;
    /** @type {?} */
    Setting.prototype.wrapperStyles;
    /** @type {?} */
    Setting.prototype.allowKeyCodes;
    /** @type {?} */
    Setting.prototype.length;
    /** @type {?} */
    Setting.prototype.numbersOnly;
    /** @type {?} */
    Setting.prototype.inputClass;
    /** @type {?} */
    Setting.prototype.wrapperClass;
    /** @type {?} */
    Setting.prototype.timer;
    /** @type {?} */
    Setting.prototype.btnClass;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CounterDirective = /** @class */ (function () {
    function CounterDirective() {
        var _this = this;
        this._counterSource$ = new Subject();
        this._subscription = Subscription.EMPTY;
        this.interval = 1000;
        this.value = new EventEmitter();
        this._subscription = this._counterSource$.pipe(switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var interval = _a.interval, count = _a.count;
            return timer(0, interval).pipe(take(count), tap((/**
             * @return {?}
             */
            function () { return _this.value.emit(--count); })));
        }))).subscribe();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CounterDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.startTimer();
    };
    /**
     * @return {?}
     */
    CounterDirective.prototype.startTimer = /**
     * @return {?}
     */
    function () {
        this._counterSource$.next({ count: this.counter, interval: this.interval });
    };
    /**
     * @return {?}
     */
    CounterDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._subscription.unsubscribe();
    };
    CounterDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[counter]'
                },] }
    ];
    /** @nocollapse */
    CounterDirective.ctorParameters = function () { return []; };
    CounterDirective.propDecorators = {
        counter: [{ type: Input }],
        value: [{ type: Output }]
    };
    return CounterDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    CounterDirective.prototype._counterSource$;
    /**
     * @type {?}
     * @private
     */
    CounterDirective.prototype._subscription;
    /** @type {?} */
    CounterDirective.prototype.counter;
    /** @type {?} */
    CounterDirective.prototype.interval;
    /** @type {?} */
    CounterDirective.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OtpInputComponent = /** @class */ (function () {
    function OtpInputComponent(keysPipe) {
        this.keysPipe = keysPipe;
        this.setting = {
            length: 4,
            timer: 0
        };
        this.onValueChange = new EventEmitter();
        this.inputControls = new Array(this.setting.length);
        this.componentKey = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
    }
    /**
     * @return {?}
     */
    OtpInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.otpForm = new FormGroup({});
        for (var index = 0; index < this.setting.length; index++) {
            this.otpForm.addControl(this.getControlName(index), new FormControl());
        }
    };
    /**
     * @return {?}
     */
    OtpInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerItem = document.getElementById("c_" + this.componentKey);
        if (containerItem) {
            /** @type {?} */
            var ele = containerItem.getElementsByClassName('.otp-input')[0];
            if (ele && ele.focus) {
                ele.focus();
            }
        }
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    OtpInputComponent.prototype.getControlName = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return "ctrl_" + idx;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OtpInputComponent.prototype.isLeftArrow = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return this.isKeyCode(e, 37);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OtpInputComponent.prototype.isRightArrow = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return this.isKeyCode(e, 39);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OtpInputComponent.prototype.isBackspaceOrDelete = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return e.key === "Backspace" || e.key === "Delete" || this.isKeyCode(e, 8) || this.isKeyCode(e, 46);
    };
    /**
     * @param {?} e
     * @param {?} targetCode
     * @return {?}
     */
    OtpInputComponent.prototype.isKeyCode = /**
     * @param {?} e
     * @param {?} targetCode
     * @return {?}
     */
    function (e, targetCode) {
        /** @type {?} */
        var key = e.keyCode || e.charCode;
        if (key == targetCode) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} e
     * @param {?} inputIdx
     * @return {?}
     */
    OtpInputComponent.prototype.keyUp = /**
     * @param {?} e
     * @param {?} inputIdx
     * @return {?}
     */
    function (e, inputIdx) {
        /** @type {?} */
        var nextInputId = this.appendKey("otp_" + (inputIdx + 1));
        /** @type {?} */
        var prevInputId = this.appendKey("otp_" + (inputIdx - 1));
        if (this.isRightArrow(e)) {
            this.setSelected(nextInputId);
            return;
        }
        if (this.isLeftArrow(e)) {
            this.setSelected(prevInputId);
            return;
        }
        /** @type {?} */
        var isBackspace = this.isBackspaceOrDelete(e);
        if (isBackspace && !e.target.value) {
            this.setSelected(prevInputId);
            this.rebuildValue();
            return;
        }
        if (!e.target.value) {
            return;
        }
        if (this.isValidEntry(e)) {
            this.focusTo(nextInputId);
        }
        this.rebuildValue();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    OtpInputComponent.prototype.appendKey = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return id + "_" + this.componentKey;
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    OtpInputComponent.prototype.setSelected = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        this.focusTo(eleId);
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele && ele.setSelectionRange) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                ele.setSelectionRange(0, 1);
            }), 0);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OtpInputComponent.prototype.isValidEntry = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var inp = String.fromCharCode(e.keyCode);
        /** @type {?} */
        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        return isMobile || /[a-zA-Z0-9-_]/.test(inp) || (this.setting.allowKeyCodes && this.setting.allowKeyCodes.includes(e.keyCode)) || (e.keyCode >= 96 && e.keyCode <= 105);
    };
    /**
     * @param {?} eleId
     * @return {?}
     */
    OtpInputComponent.prototype.focusTo = /**
     * @param {?} eleId
     * @return {?}
     */
    function (eleId) {
        /** @type {?} */
        var ele = document.getElementById(eleId);
        if (ele) {
            ele.focus();
            ele.selectionStart = ele.selectionEnd = 100;
        }
    };
    /**
     * @return {?}
     */
    OtpInputComponent.prototype.rebuildValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var val = '';
        this.keysPipe.transform(this.otpForm.controls).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            if (_this.otpForm.controls[k].value) {
                val += _this.otpForm.controls[k].value;
            }
        }));
        this.onValueChange.emit(val);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OtpInputComponent.prototype.onCounterChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.counter = e;
        if (this.counter == 0) {
            this.onValueChange.emit(-1);
        }
    };
    /**
     * @return {?}
     */
    OtpInputComponent.prototype.ressendOtp = /**
     * @return {?}
     */
    function () {
        this.CounterDirective.first.startTimer();
        this.onValueChange.emit(-2);
    };
    OtpInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'otp',
                    template: "<div class=\"otp-container {{setting.wrapperClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\n    [ngStyle]=\"setting.wrapperStyles\">\n    <input \n        [type]=\"setting.numbersOnly ? 'tel' : 'text'\" \n        numberOnly [disabledNumberOnly]=\"!setting.numbersOnly\"\n        [ngStyle]=\"setting.inputStyles\" \n        maxlength=\"1\" \n        class=\"otp-input {{setting.inputClass}}\" \n        autocomplete=\"off\"\n        *ngFor=\"let item of otpForm?.controls | keys; let i = index\" \n        [formControl]=\"otpForm.controls[item]\"\n        id=\"otp_{{i}}_{{componentKey}}\" \n        (keyup)=\"keyUp($event, i)\"\n    >\n    <ng-container counter [counter]=\"setting.timer\" (value)=\"onCounterChange($event)\">\n        <div>\n            <button class=\"btn {{setting.btnClass}}\" [disabled]=\"counter != 0\" (click)=\"ressendOtp()\">\n                Resend OTP <span *ngIf=\"counter != 0\">in {{ counter }} seconds.</span>\n            </button>\n        </div>\n    </ng-container>\n</div>",
                    styles: [".otp-input{width:2em;height:2em;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:28px}.otp-input:focus{outline-offset:0;outline:#2b91e2 auto 5px}.otp-container .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input{font-size:24px}}@media screen and (max-width:420px){.otp-input{font-size:18px}}"]
                }] }
    ];
    /** @nocollapse */
    OtpInputComponent.ctorParameters = function () { return [
        { type: KeysPipe }
    ]; };
    OtpInputComponent.propDecorators = {
        setting: [{ type: Input }],
        onValueChange: [{ type: Output }],
        CounterDirective: [{ type: ViewChildren, args: [CounterDirective,] }]
    };
    return OtpInputComponent;
}());
if (false) {
    /** @type {?} */
    OtpInputComponent.prototype.setting;
    /** @type {?} */
    OtpInputComponent.prototype.onValueChange;
    /** @type {?} */
    OtpInputComponent.prototype.CounterDirective;
    /** @type {?} */
    OtpInputComponent.prototype.otpForm;
    /** @type {?} */
    OtpInputComponent.prototype.inputControls;
    /** @type {?} */
    OtpInputComponent.prototype.componentKey;
    /** @type {?} */
    OtpInputComponent.prototype.counter;
    /**
     * @type {?}
     * @private
     */
    OtpInputComponent.prototype.keysPipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberOnly = /** @class */ (function () {
    function NumberOnly(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    NumberOnly.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.disabledNumberOnly) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');
        }
    };
    NumberOnly.decorators = [
        { type: Directive, args: [{
                    selector: '[numberOnly]'
                },] }
    ];
    /** @nocollapse */
    NumberOnly.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NumberOnly.propDecorators = {
        disabledNumberOnly: [{ type: Input }]
    };
    return NumberOnly;
}());
if (false) {
    /** @type {?} */
    NumberOnly.prototype.disabledNumberOnly;
    /**
     * @type {?}
     * @private
     */
    NumberOnly.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NumberOnly.prototype._renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularOtpLibModule = /** @class */ (function () {
    function AngularOtpLibModule() {
    }
    AngularOtpLibModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        OtpInputComponent,
                        KeysPipe,
                        NumberOnly,
                        CounterDirective
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    exports: [
                        OtpInputComponent
                    ],
                    providers: [KeysPipe]
                },] }
    ];
    return AngularOtpLibModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularOtpLibModule, OtpInputComponent, CounterDirective as ɵa, KeysPipe as ɵb, NumberOnly as ɵc };
//# sourceMappingURL=angular-otp-box.js.map
