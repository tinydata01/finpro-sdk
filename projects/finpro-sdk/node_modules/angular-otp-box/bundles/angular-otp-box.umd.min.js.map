{"version":3,"sources":["ng://angular-otp-box/lib/pipes/keys.pipe.ts","ng://angular-otp-box/lib/directives/timer.directive.ts","ng://angular-otp-box/lib/components/angular-otp-input.component.ts","ng://angular-otp-box/lib/directives/numberOnly.directive.ts","ng://angular-otp-box/lib/angular-otp-box.module.ts"],"names":["KeysPipe","prototype","transform","value","Object","keys","Pipe","args","name","CounterDirective","_this","this","_counterSource$","Subject","_subscription","Subscription","EMPTY","interval","EventEmitter","pipe","switchMap","_a","count","timer","take","tap","emit","subscribe","ngOnChanges","changes","startTimer","next","counter","ngOnDestroy","unsubscribe","Directive","selector","Input","Output","OtpInputComponent","keysPipe","setting","length","onValueChange","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","ngOnInit","otpForm","FormGroup","index","addControl","getControlName","FormControl","ngAfterViewInit","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","isLeftArrow","e","isKeyCode","isRightArrow","isBackspaceOrDelete","key","targetCode","keyCode","charCode","keyUp","inputIdx","nextInputId","appendKey","prevInputId","setSelected","target","rebuildValue","isValidEntry","focusTo","id","eleId","setSelectionRange","setTimeout","inp","String","fromCharCode","test","navigator","userAgent","allowKeyCodes","includes","selectionStart","selectionEnd","val","controls","forEach","k","onCounterChange","ressendOtp","first","Component","template","ViewChildren","NumberOnly","_elRef","_renderer","disabledNumberOnly","setAttribute","nativeElement","ElementRef","Renderer2","AngularOtpLibModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","exports","providers"],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'keys'\n})\nexport class KeysPipe implements PipeTransform {\n\ttransform(value: any): string[] {\n\t\treturn Object.keys(value)\n\t}\n}","import { Directive, Input, Output, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\n\nimport { Subject, Observable, Subscription, timer } from 'rxjs';\nimport { switchMap, take, tap } from 'rxjs/operators';\n\n@Directive({\n    selector: '[counter]'\n})\nexport class CounterDirective implements OnChanges, OnDestroy {\n    private _counterSource$ = new Subject<any>();\n    private _subscription = Subscription.EMPTY;\n\n    @Input() counter: number;\n    interval: number = 1000;\n    @Output() value = new EventEmitter<number>();\n\n    constructor() {\n        this._subscription = this._counterSource$.pipe(\n            switchMap(({ interval, count }) =>\n                timer(0, interval).pipe(\n                    take(count),\n                    tap(() => this.value.emit(--count))\n                )\n            )\n        ).subscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.startTimer();\n    }\n\n    public startTimer() {\n        this._counterSource$.next({ count: this.counter, interval: this.interval });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { Component, OnInit, Input, Output, EventEmitter, ViewChildren } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { KeysPipe } from '../pipes/keys.pipe';\nimport { Setting } from '../models/setting';\nimport { CounterDirective } from '../directives/timer.directive';\n\n@Component({\n\tselector: 'otp',\n\ttemplateUrl: './angular-otp-input.component.html',\n\tstyleUrls: ['./angular-otp-input.component.scss']\n})\n\nexport class OtpInputComponent implements OnInit {\n\t@Input() setting: Setting = { \n\t\tlength: 4, \n\t\ttimer: 0\n\t};\n\t@Output() onValueChange = new EventEmitter<any>();\n\t@ViewChildren(CounterDirective) CounterDirective;\n\totpForm: FormGroup;\n\tinputControls: FormControl[] = new Array(this.setting.length);\n\tcomponentKey = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n\tpublic counter: number;\n\t\n\tconstructor(private keysPipe: KeysPipe) {}\n\n\tpublic ngOnInit(): void {\n\t\tthis.otpForm = new FormGroup({})\n\t\tfor (let index = 0; index < this.setting.length; index++) {\n\t\t\tthis.otpForm.addControl(this.getControlName(index), new FormControl())\n\t\t}\n\t}\n\t\n\tpublic ngAfterViewInit(): void {\n\t\tlet containerItem = document.getElementById(`c_${this.componentKey}`);\n\t\tif (containerItem) {\n\t\t\tlet ele: any = containerItem.getElementsByClassName('.otp-input')[0]\n\t\t\tif (ele && ele.focus) {\n\t\t\t\tele.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getControlName(idx) {\n\t\treturn `ctrl_${idx}`;\n\t}\n\n\tisLeftArrow(e) {\n\t\treturn this.isKeyCode(e, 37);\n\t}\n\n\tisRightArrow(e) {\n\t\treturn this.isKeyCode(e, 39);\n\t}\n\n\tisBackspaceOrDelete(e) {\n\t\treturn e.key === \"Backspace\" || e.key === \"Delete\" || this.isKeyCode(e, 8) || this.isKeyCode(e, 46);\n\t}\n\n\tisKeyCode(e, targetCode) {\n\t\tvar key = e.keyCode || e.charCode;\n\t\tif(key == targetCode) { return true; }\n\t\treturn false;\n\t}\n\n\tkeyUp(e, inputIdx: number) {\n\t\tlet nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\n\t\tlet prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\n\t\tif (this.isRightArrow(e)) {\n\t\t\tthis.setSelected(nextInputId);\n\t\t\treturn;\n\t\t}\n\t\tif (this.isLeftArrow(e)) {\n\t\t\tthis.setSelected(prevInputId);\n\t\t\treturn;\n\t\t}\n\t\tlet isBackspace = this.isBackspaceOrDelete(e);\n\t\tif (isBackspace && !e.target.value) {\n\t\t\tthis.setSelected(prevInputId);\n\t\t\tthis.rebuildValue();\n\t\t\treturn;\n\t\t}\n\t\tif (!e.target.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.isValidEntry(e)) {\n\t\t\tthis.focusTo(nextInputId);\n\t\t}\n\t\tthis.rebuildValue();\n\t}\n\n\tappendKey(id) {\n\t\treturn `${id}_${this.componentKey}`;\n\t}\n\n\tsetSelected(eleId) {\n\t\tthis.focusTo(eleId);\n\t\tlet ele: any = document.getElementById(eleId);\n\t\tif (ele && ele.setSelectionRange) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tele.setSelectionRange(0, 1);\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\tisValidEntry(e) {\n\t\tvar inp = String.fromCharCode(e.keyCode);\n\t\tvar isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\t\treturn isMobile || /[a-zA-Z0-9-_]/.test(inp) || (this.setting.allowKeyCodes && this.setting.allowKeyCodes.includes(e.keyCode)) || (e.keyCode >= 96 && e.keyCode <= 105);\n\t}\n\n\tfocusTo(eleId) {\n\t\tlet ele: any = document.getElementById(eleId);\n\t\tif (ele) {\n\t\t\tele.focus();\n\t\t\tele.selectionStart = ele.selectionEnd = 100;\n\t\t}\n\t}\n\n\trebuildValue() {\n\t\tlet val = '';\n\t\tthis.keysPipe.transform(this.otpForm.controls).forEach(k => {\n\t\t\tif (this.otpForm.controls[k].value) {\n\t\t\t\tval += this.otpForm.controls[k].value;\n\t\t\t}\n\t\t});\n\t\tthis.onValueChange.emit(val);\n\t}\n\n\tpublic onCounterChange(e): void {\n\t\tthis.counter = e;\n\t\tif(this.counter == 0) {\n\t\t\tthis.onValueChange.emit(-1);\n\t\t}\n\t}\n\n\tressendOtp(): void {\n\t\tthis.CounterDirective.first.startTimer();\n\t\tthis.onValueChange.emit(-2);\n\t}\n}","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\n\n@Directive({\n\tselector: '[numberOnly]'\n})\nexport class NumberOnly {\n\t@Input() disabledNumberOnly: boolean;\n\tconstructor(private _elRef: ElementRef, private _renderer: Renderer2) { }\n\n\tngOnInit() {\n\t\tif (!this.disabledNumberOnly) {\n\t\t\tthis._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\n\t\t}\n\t}\n}","import { NgModule,  } from '@angular/core';\nimport { OtpInputComponent } from './components/angular-otp-input.component';\nimport { KeysPipe } from './pipes/keys.pipe';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { NumberOnly } from './directives/numberOnly.directive';\nimport { CounterDirective } from './directives/timer.directive';\n\n@NgModule({\n  declarations: [\n    OtpInputComponent,\n    KeysPipe,\n    NumberOnly,\n    CounterDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    OtpInputComponent\n  ],\n  providers:[KeysPipe]\n})\nexport class AngularOtpLibModule { }\n"]}